import logging
import io
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils import markdown
from aiogram import Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from blockcypher import generate_new_address, get_address_overview


import qrcode
import asyncio
from tg_bot.config import load_config

# from aiogram import executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = load_config()
TELEGRAM_API_TOKEN = config.tg_bot.token
BLOCKCYPHER_API_TOKEN = config.tg_bot.blockcypher
CRYPTO_COIN = "btc-testnet"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

router = Router()
# dp.include_router(router)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
active_payments = {}


class PaymentState(StatesGroup):
    waiting_for_payment = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    start_text = (
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Payment Bot!\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ Bitcoin testnet\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∞–¥—Ä–µ—Å"
    )
    await message.answer(start_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay
@router.message(Command("pay"))
async def cmd_pay(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    amount = 0.00001  # –°—É–º–º–∞ –≤ BTC testnet

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        address_data = generate_new_address(
            coin_symbol="btc-testnet",
            api_key=BLOCKCYPHER_API_TOKEN,
            # address_type="p2pkh",  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∞–¥—Ä–µ—Å–∞
        )
        # address = address_data["address"]
        address="mnwh9sDLdUZM8QwTBWCtZKGczXZPGP4QPq"

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(address=address, amount=amount)
        active_payments[user_id] = {
            "address": address,
            "amount": amount,
            "status": "pending",
        }

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(address)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format="PNG")
        img_byte_arr.seek(0)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"üí∏ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É: {amount} BTC (testnet)\n\n"
            f"üîó –ê–¥—Ä–µ—Å: `{address}`\n"
            f"üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å: [Blockchair](https://blockchair.com/bitcoin/testnet/address/{address})"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            text=message_text, parse_mode="Markdown", disable_web_page_preview=True
        )
        await message.answer_photo(
            photo=types.BufferedInputFile(
                img_byte_arr.getvalue(), filename="payment_qr.png"
            ),
            caption="üì≤ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã",
        )

        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        asyncio.create_task(check_payment(user_id, address, amount))

    except Exception as e:
        logger.error(f"Error generating address: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
from blockcypher import get_address_overview, get_address_details  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

async def check_payment(user_id: int, address: str, required_amount: float):
    payment_detected = False
    check_count = 0
    
    while check_count < 30:  # –ú–∞–∫—Å–∏–º—É–º 30 –ø—Ä–æ–≤–µ—Ä–æ–∫ (~15 –º–∏–Ω—É—Ç)
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            unconfirmed = get_address_details(
                address=address,
                coin_symbol=CRYPTO_COIN,
                api_key=BLOCKCYPHER_API_TOKEN
            )
            print(unconfirmed)
            if unconfirmed['unconfirmed_txrefs']:
                total_unconfirmed = sum(
                    [tx['total'] for tx in unconfirmed['unconfirmed_txrefs']]
                ) / 1e8
                
                if not payment_detected:
                    await bot.send_message(
                        user_id, 
                        f"üïí –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ {total_unconfirmed} BTC!"
                    )
                    payment_detected = True

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            confirmed_data = get_address_overview(
                address=address,
                coin_symbol=CRYPTO_COIN,
                api_key=BLOCKCYPHER_API_TOKEN
            )
            confirmed = confirmed_data['balance'] / 1e8
            
            if confirmed >= required_amount:
                await bot.send_message(user_id, "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ!")
                active_payments.pop(user_id, None)
                return
                
            # 3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
            await asyncio.sleep(20 if payment_detected else 30)
            check_count += 1

        except Exception as e:
            # raise
            logger.error(f"Payment check error: {e}")
            await asyncio.sleep(60)
    
    await bot.send_message(user_id, "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞.")

async def main():
    bot = Bot(token=TELEGRAM_API_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    dp.include_router(router)
    await dp.start_polling(bot, skip_updates=True)
    await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main=main())
